#!/usr/bin/env python
# Desc: This script checks, being very paranoid, for differences between the
#       database holding the atlas group quota information (on database) and the
#       current condor configuration file passed.  If there are any differences,
#       it optionally backs up the config and writes the changed quotas
#       to a temporary file before replacing the real file with the temporary
#       one.  This is run as cronjob every 5 minutes
#
# By: William Strecker-Kellogg -- willsk@bnl.gov
#
# CHANGELOG:
#   5/29/15     v1.0 rewrite to use unified group-class tree interface
#   8/24/15     v2.0 take arguments from command line


import logging
import optparse
import os
import os.path
import shutil
import smtplib
import subprocess
import sys
import tempfile
import time

import gq.group as group
import gq.group.db as gdb
import gq.group.file as gfile
from gq.log import setup_logging

from email.MIMEText import MIMEText
from email.utils import formatdate

CONDOR_RECONFIG = '/usr/sbin/condor_reconfig'


class UpdateQuotaGroup(group.QuotaGroup):

    file_template = """\
# /-----------------------------------------------------\\
# | This file is automatically generated -- DO NOT EDIT |
# | Last updated:     %s          |
# \-----------------------------------------------------/
{0}
""" % time.ctime()

    def get_diff_str(self, other):
        mine = set([x.full_name for x in self.all()])
        theirs = set([x.full_name for x in other.all()])

        grps_added = theirs - mine
        grps_removed = mine - theirs

        s = ''

        for grp in grps_added:
            s += "Added " + repr(other.find(grp)) + "\n"
        for grp in grps_removed:
            s += "Deleted " + repr(self.find(grp)) + "\n"

        for grpname in mine & theirs:
            mygrp = self.find(grpname)
            theirgrp = other.find(grpname)

            diffattrs = mygrp.diff(theirgrp)
            for attr, myval, theirval in ((x, getattr(mygrp, x), getattr(theirgrp, x))
                                          for x in diffattrs):
                s += "Group '%s' - %s changed from %s to %s\n" % \
                    (grpname, attr, myval, theirval)

        return s

    def __str__(self):

        ordered = list(reversed(list(self)))

        msg = "GROUP_NAMES = $(GROUP_NAMES) %s\n" % ', \\\n'.join(x.full_name for x in ordered)
        for g in ordered:
            msg += '\n'
            msg += 'GROUP_QUOTA_%s = %d\n' % (g.full_name, g.quota)
            msg += 'GROUP_PRIO_FACTOR_%s = %.1f\n' % (g.full_name, g.prio)
            msg += 'GROUP_ACCEPT_SURPLUS_%s = %s\n' % (g.full_name, g.surplus)
        return msg

    def write_file(self, fobj):
        try:
            fobj.write(self.file_template.format(self))
        except EnvironmentError as e:
            log.exception("Error writing temp: %s", e)
            os.unlink(fobj.name)
            sys.exit(1)


def get_file_groups(x): gfile.build_quota_groups_file(x, UpdateQuotaGroup)


def get_db_groups(): gdb.build_quota_groups_db(UpdateQuotaGroup)


def overwrite_file(groups, quota_file, backup_file=None):
    # 1. Open temporary file --> Write Changed quota file to temp file
    # 2. A bit pedantic, but re-scan temp file for consistency
    # 3. Overwrite backup file with copy of current file
    # 4. Replace current file with temp copy

    # Needs to be on same fs to allow os.rename() to work, hence dir=*
    tmpf = tempfile.NamedTemporaryFile(delete=False, prefix='gq_', suffix='_QU',
                                       dir=os.path.dirname(quota_file))
    tempname = tmpf.name
    log.debug("Writing temporary file: %s", tempname)
    groups.write_file(tmpf)
    tmpf.close()
    os.chmod(tempname, 0644)

    # This may be overkill...but can't hurt -- reread tmpfile and compare w/ db
    new_groups = get_file_groups(tempname)
    if not new_groups.full_cmp(groups):
        log.error("Very strange, new file %s is corrupt", tempname)
        sys.exit(1)

    # Overwrite the backup with a simple copy operation
    if backup_file and os.path.exists(quota_file):
        log.info("Backing up %s -> %s", quota_file, backup_file)
        try:
            shutil.copy2(quota_file, backup_file)
        except EnvironmentError as e:
            log.error('Error backing up file: %s', e)
            os.unlink(tempname)
            sys.exit(1)

    # Replace (atomically) the actual file with the new version
    os.rename(tempname, quota_file)

    log.info('Quota file updated with new values')


def send_email(address, changes):

    log.info('Sending mail to "%s"...' % address)
    body = \
        """
Info: condor03 has detected a change in the ATLAS group quota
database; the changes that were made are:

%s

Receipt of this message indicates that condor has been successfully
reconfigured to use the new quotas indicated on the page above.
""" % changes.strip()
    msg = MIMEText(body)
    msg['From'] = "root@condor03"
    msg['To'] = address
    msg['Subject'] = "Group quotas changed"
    msg['Date'] = formatdate(localtime=True)
    try:
        smtp_server = smtplib.SMTP('adminmail.rcf.bnl.gov', 25)
        smtp_server.sendmail(msg['From'], msg['To'], msg.as_string())
    except Exception:
        log.error('Problem sending mail, no message sent')
        return 1
    return 0


def parse_options():
    parser = optparse.OptionParser(
        usage="%prog [options] FILE",
        description="This program dumps the group-quota database into a condor "
                    "configuration file, only overwriting if changes need to be "
                    "made and reconfiguring condor if needed and -r is passed",
        epilog="NOTE: This script uses the group-quota library so it will read the "
               "configuration file to get information about the database the "
               "way that library does, either default, /etc/gq.cfg, or in the "
               "GQ_CONFIG environment variable.",
    )
    parser.add_option("-b", "--backup-file", dest="backup",
                      help="File to back-up quotas to, defaults to no backup")
    parser.add_option("-l", "--log-file", dest="log", default="-",
                      help="Log file to write actions to, '-' = stderr (the default)")
    parser.add_option("-m", "--mail", action="store", dest="email",
                      help="Send email to address given here when a change is made")
    parser.add_option("-r", "--reconfig", action="store_true", default=False,
                      help="Issue a condor_reconfig after a change is detected")
    parser.add_option("-d", "--debug", action="store_true", dest="level", default=False,
                      help="Log more verbosely (DEBUG level)")
    opts, args = parser.parse_args()
    opts.level = logging.DEBUG if opts.level else logging.INFO

    if len(args) != 1:
        parser.error("Need exactly one argument (the config file to write to)")

    return opts, args[0]


if __name__ == '__main__':

    options, quota_file = parse_options()
    log = setup_logging(options.log, backup=2, size_mb=20, level=options.level)

    db_groups = get_db_groups()
    fp_groups = get_file_groups(quota_file)

    if db_groups.full_cmp(fp_groups):
        log.debug('No Database Change...')
        sys.exit(0)

    # Write the DB groups to the file
    overwrite_file(db_groups, quota_file, options.backup)

    changes = fp_groups.get_diff_str(db_groups)
    log.info('Changes made are:')
    for line in changes.split("\n"):
        if line:
            log.info(line)

    # Do a reconfig, and send mail before we exit
    if options.reconfig:
        if subprocess.call(CONDOR_RECONFIG) != 0:
            log.error('Problem with condor_reconfig, returned nonzero')
            sys.exit(1)
        log.info('Reconfig successful...')
    else:
        log.debug('No reconfig done...')

    if options.email:
        sys.exit(send_email(options.email, changes))
    else:
        log.info('Not sending mail...')
